     1                                  %include	"matriz.asm"
     1                              <1> extern	printf, puts
     2                              <1> 
     3                              <1> %macro  printMatriz 3
     4                              <1> 
     5                              <1> section	.data
     6                              <1> 
     7                              <1> 	posx		db	00h
     8                              <1> 
     9                              <1> 	msgCI           db      '   ', 0
    10                              <1>         msgCS           db      '|x|', 0
    11                              <1>         msgCO           db      '|o|', 0
    12                              <1>         msgCD           db      '| |', 0
    13                              <1>         msgSL           db      '',10,13,0
    14                              <1>         msgDiv          db      10,13,'----------------------',10,13,0
    15                              <1> 
    16                              <1> section .text
    17                              <1> inicio:
    18                              <1> 
    19                              <1> 	sub	rax,rax
    20                              <1> 	sub	rbx,rbx
    21                              <1> 	sub	rsi,rsi
    22                              <1> ciclo:
    23                              <1> 	cmp	bl, %2 ; si es igual a 49
    24                              <1> 	je	termina
    25                              <1> 
    26                              <1> 	mov	al, [%1 + rbx]
    27                              <1> 	and	al,10000000b ; si la casilla es invalida
    28                              <1> 	cmp	al,10000000b
    29                              <1> 	je	printCI
    30                              <1> 
    31                              <1> 	mov	al,[%1 + rbx]
    32                              <1> 	and	al,01000000b ; si tiene un soldado
    33                              <1> 	cmp	al,01000000b
    34                              <1> 	je	printSol
    35                              <1> 
    36                              <1> 	mov	al,[%1 + rbx]
    37                              <1> 	and	al,00100000b ; si tiene un oficial
    38                              <1> 	cmp	al,00100000b
    39                              <1> 	je	printOfi
    40                              <1> 
    41                              <1> 	mov     rdi, msgCD
    42                              <1>         mov     sil,[%1 + rbx]
    43                              <1>         sub     rsp, 8
    44                              <1>         call    printf
    45                              <1>         add     rsp, 8
    46                              <1> 
    47                              <1> avanza:
    48                              <1> 	inc	bl
    49                              <1> 
    50                              <1> 	inc	byte[posx]
    51                              <1> 	mov	cl,%3
    52                              <1> 	cmp	byte[posx],cl ;revisar
    53                              <1> 	je	saltoDeLinea
    54                              <1> 
    55                              <1> 	jmp	ciclo
    56                              <1> 
    57                              <1> termina:
    58                              <1> 	jmp 	fin
    59                              <1> 
    60                              <1> saltoDeLinea:
    61                              <1> 	mov	byte[posx],00h
    62                              <1> 
    63                              <1> 	mov	rdi, msgDiv
    64                              <1> 	sub	rsp, 8
    65                              <1> 	call	puts
    66                              <1> 	add	rsp, 8
    67                              <1> 	jmp	ciclo
    68                              <1> 
    69                              <1> 
    70                              <1> printCI:
    71                              <1> 	mov	rdi, msgCI
    72                              <1> 	sub	rsp, 8
    73                              <1> 	call	printf
    74                              <1> 	add	rsp, 8
    75                              <1> 
    76                              <1> 	jmp	avanza
    77                              <1> printSol:
    78                              <1> 	mov     rdi, msgCS
    79                              <1>         sub     rsp, 8
    80                              <1>         call    printf
    81                              <1>         add     rsp, 8
    82                              <1> 
    83                              <1>         jmp     avanza
    84                              <1> 
    85                              <1> 
    86                              <1> printOfi:
    87                              <1> 	mov     rdi, msgCO
    88                              <1>         sub     rsp, 8
    89                              <1>         call    printf
    90                              <1>         add     rsp, 8
    91                              <1> 
    92                              <1>         jmp     avanza
    93                              <1> 
    94                              <1> fin:
    95                              <1> 	sub	rax,rax
    96                              <1> 
    97                              <1> %endmacro
     2                                  %include	"macros.asm"
     1                              <1> extern gets, puts, sscanf, printf, strcmp
     2                              <1> 
     3                              <1> %macro mGets 1
     4                              <1>         mov     rdi, %1
     5                              <1>         sub     rsp, 8
     6                              <1>         call    gets
     7                              <1>         add     rsp, 8
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> %macro mPuts 1
    11                              <1>         mov     rdi, %1
    12                              <1>         sub     rsp, 8
    13                              <1>         call    puts
    14                              <1>         add     rsp, 8
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro mSscanf 3
    18                              <1>         mov     rdi, %1
    19                              <1>         mov     rsi, %2
    20                              <1>         mov     rdx, %3
    21                              <1>         sub     rsp, 8
    22                              <1>         call    sscanf
    23                              <1>         add     rsp, 8
    24                              <1> 
    25                              <1>         cmp     rax, 1
    26                              <1>         jl      error
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro ingreso 3
    30                              <1> lectura:
    31                              <1> 	mPuts	msgx
    32                              <1> 	mGets   posxStr
    33                              <1> 
    34                              <1>         mPuts   msgy
    35                              <1>         mGets   posyStr
    36                              <1> 
    37                              <1>         mSscanf posxStr, mFormat, posxEnv
    38                              <1>         mSscanf posyStr, mFormat, posyEnv
    39                              <1> 
    40                              <1> 	;validar que este entre 1 y 7
    41                              <1>         mov     al, [posxEnv]
    42                              <1>         cmp     al, 1
    43                              <1>         jl      error
    44                              <1>         cmp     al, 7
    45                              <1>         jg      error
    46                              <1> 
    47                              <1>         mov     al, [posyEnv]
    48                              <1>         cmp     al, 1
    49                              <1>         jl      error
    50                              <1>         cmp     eax, 7
    51                              <1>         jg      error
    52                              <1> 
    53                              <1> validarCasilla:
    54                              <1> 	sub	rbx,rbx
    55                              <1> 	indice	posxEnv, posyEnv
    56                              <1> 	mov	rdi,mVer
    57                              <1> 	mov	sil,[%3 + rbx]
    58                              <1> 	sub     rsp, 8
    59                              <1>         call    printf
    60                              <1>         add     rsp, 8
    61                              <1> 
    62                              <1> 	sub	rax,rax
    63                              <1> 	mov	al, [%3 + rbx]
    64                              <1> 
    65                              <1> 	and	al,10000000b ; si la casilla es invalida
    66                              <1> 	cmp	al,10000000b
    67                              <1> 	je	error
    68                              <1> 
    69                              <1> envio:
    70                              <1> 	mov     al,[posxEnv]
    71                              <1>         mov     [%1], al
    72                              <1> 
    73                              <1>         mov     al,[posyEnv]
    74                              <1>         mov     [%2], al
    75                              <1> 
    76                              <1> 	mov     rdi, msgPsc
    77                              <1>         mov     sil, [posxEnv]
    78                              <1>         mov     dl, [posyEnv]
    79                              <1>         sub     rsp, 8
    80                              <1>         call    printf
    81                              <1>         add     rsp, 8
    82                              <1> 
    83                              <1> 	jmp	terminaLectura
    84                              <1> error:
    85                              <1> 	mPuts	msgError
    86                              <1> 	jmp	lectura
    87                              <1> 
    88                              <1> terminaLectura:
    89                              <1> 	sub	rax,rax
    90                              <1> lecturaDir:
    91                              <1> 	mPuts	msgDir
    92                              <1> 	mGets	direccion
    93                              <1> comparacion:
    94                              <1> 
    95                              <1> 	lea	rdi,[direccion]
    96                              <1> 	lea	rsi,[derDir]
    97                              <1> 
    98                              <1> 	sub	rsp,8
    99                              <1> 	call	strcmp
   100                              <1> 	add	rsp,8
   101                              <1> 	test	rax,rax
   102                              <1> 	jz	derecha
   103                              <1> 
   104                              <1> 	lea     rdi,[direccion]
   105                              <1> 	lea	rsi,[dderDir]
   106                              <1> 	sub     rsp,8
   107                              <1>         call    strcmp
   108                              <1>         add     rsp,8
   109                              <1> 	test	rax,rax
   110                              <1>         jz      diagonalDerecha
   111                              <1> 
   112                              <1>         lea     rdi,[direccion]
   113                              <1> 	lea     rsi,[abaDir]
   114                              <1>         sub     rsp,8
   115                              <1>         call    strcmp
   116                              <1>         add     rsp,8
   117                              <1>         test    rax,rax
   118                              <1>         jz      abajo
   119                              <1> 
   120                              <1>         lea     rdi,[direccion]
   121                              <1> 	lea     rsi,[dizqDir]
   122                              <1>         sub     rsp,8
   123                              <1>         call    strcmp
   124                              <1>         add     rsp,8
   125                              <1>         test    rax,rax
   126                              <1>         jz      diagonalIzquierda
   127                              <1> 
   128                              <1>         lea     rdi,[direccion]
   129                              <1>         lea     rsi,[izqDir]
   130                              <1>         sub     rsp,8
   131                              <1>         call    strcmp
   132                              <1>         add     rsp,8
   133                              <1>         test    rax,rax
   134                              <1>         jz      izquierda
   135                              <1> 
   136                              <1> entradaInvalida:
   137                              <1> 	mPuts	msgErrDir
   138                              <1> 	jmp	lecturaDir
   139                              <1> 
   140                              <1> derecha:
   141                              <1> 	mPuts	derDir
   142                              <1> 	sub     rbx,rbx
   143                              <1>         indice  posxEnv, posyEnv
   144                              <1> 	mov	al,[%3 + rbx]
   145                              <1> 	and	al,00010000b
   146                              <1> 	cmp	al,00010000b
   147                              <1> 	jne	entradaInvalida
   148                              <1> 
   149                              <1> 	and     byte[%3 + rbx],00111111b;quita al soldado
   150                              <1>         inc     bl;avanza a la derecha
   151                              <1>         or      byte[%3 + rbx],01000000b;añade un soldado
   152                              <1> 
   153                              <1> 	jmp	finDir
   154                              <1> diagonalDerecha:
   155                              <1>         mPuts   dderDir
   156                              <1> 
   157                              <1> 	sub     rbx,rbx
   158                              <1>         indice  posxEnv, posyEnv
   159                              <1>         mov     al,[%3 + rbx]
   160                              <1>         and     al,00001000b
   161                              <1>         cmp     al,00001000b
   162                              <1>         jne     entradaInvalida
   163                              <1> 
   164                              <1> 	and     byte[%3 + rbx],00111111b;quita al soldado
   165                              <1>         add     bl, 08h;avanza a la siguinte fila+1
   166                              <1>         or      byte[%3 + rbx],01000000b;añade un soldado
   167                              <1> 
   168                              <1> 	jmp	finDir
   169                              <1> abajo:
   170                              <1>         mPuts   abaDir
   171                              <1> 
   172                              <1> 	sub     rbx,rbx
   173                              <1>         indice  posxEnv, posyEnv
   174                              <1>         mov     al,[%3 + rbx]
   175                              <1>         and     al,00000100b
   176                              <1>         cmp     al,00000100b
   177                              <1>         jne     entradaInvalida
   178                              <1> 
   179                              <1> 	and	byte[%3 + rbx],00111111b;quita al soldado
   180                              <1> 	add	bl, 07h;avanza a la siguinte fila
   181                              <1> 	or	byte[%3 + rbx],01000000b;añade un soldado
   182                              <1> 
   183                              <1> 	jmp	finDir
   184                              <1> diagonalIzquierda:
   185                              <1> 	mPuts   dizqDir
   186                              <1> 
   187                              <1> 	sub     rbx,rbx
   188                              <1>         indice  posxEnv, posyEnv
   189                              <1>         mov     al,[%3 + rbx]
   190                              <1>         and     al,00000010b
   191                              <1>         cmp     al,00000010b
   192                              <1>         jne     entradaInvalida
   193                              <1> 
   194                              <1> 	and     byte[%3 + rbx],00111111b;quita al soldado
   195                              <1>         add     bl, 06h;avanza a la siguinte fila-1
   196                              <1>         or      byte[%3 + rbx],01000000b;añade un soldado
   197                              <1> 
   198                              <1> 	jmp	finDir
   199                              <1> izquierda:
   200                              <1> 	mPuts   izqDir
   201                              <1> 
   202                              <1> 	sub     rbx,rbx
   203                              <1>         indice  posxEnv, posyEnv
   204                              <1>         mov     al,[%3 + rbx]
   205                              <1>         and     al,00000001b
   206                              <1>         cmp     al,00000001b
   207                              <1>         jne     entradaInvalida
   208                              <1> 
   209                              <1> 	and     byte[%3 + rbx],00111111b;quita al soldado
   210                              <1>         dec     bl;avanza a la izq
   211                              <1>         or      byte[%3 + rbx],01000000b;añade un soldado
   212                              <1> 
   213                              <1> 	jmp	finDir
   214                              <1> finDir:
   215                              <1> 	sub	rax,rax
   216                              <1> 
   217                              <1> %endmacro
   218                              <1> 
   219                              <1> %macro	ganaronSoldados	1
   220                              <1> 
   221                              <1> validarFin:
   222                              <1> 	sub	rcx,rcx
   223                              <1> 	mov	cl,09h
   224                              <1> 	indice	posxFortaleza,posyFortaleza
   225                              <1> cicloFortaleza:
   226                              <1> 	mov	al,[%1 + rbx]
   227                              <1> 	and	al,01000000b
   228                              <1> 	cmp	al,01000000b
   229                              <1> 	jne	finValidacion;si no es igual se termina la validacion
   230                              <1> siguienteDir:
   231                              <1> 	inc	rbx
   232                              <1> 	inc	byte[contador]
   233                              <1> 	inc	byte[contAux]
   234                              <1> 	cmp	byte[contAux],03h
   235                              <1> 	je	siguienteFila
   236                              <1> 	loop	cicloFortaleza
   237                              <1> 	jmp	finValidacion
   238                              <1> siguienteFila:
   239                              <1> 	mov	byte[contAux],00h
   240                              <1> 	add	rbx,0004h
   241                              <1> 	loop	cicloFortaleza
   242                              <1> 
   243                              <1> finValidacion:
   244                              <1> 	sub	rax,rax
   245                              <1> 	mov	al,[contador]
   246                              <1> 
   247                              <1> %endmacro
   248                              <1> 
   249                              <1> %macro  indice 2
   250                              <1>         ;devuelve en rbx el indice
   251                              <1>         sub     rbx,rbx
   252                              <1>         sub     rax,rax
   253                              <1> 
   254                              <1>         movsx   rax, byte[%2]
   255                              <1>         dec     rax
   256                              <1>         imul    rax,01h
   257                              <1>         imul    rax,07h
   258                              <1> 
   259                              <1>         mov     rbx,rax
   260                              <1> 
   261                              <1>         movsx   rax, byte[%1]
   262                              <1>         dec     rax
   263                              <1>         imul    rax,01h
   264                              <1> 
   265                              <1>         add     rbx,rax
   266                              <1> 
   267                              <1> %endmacro
   268                              <1> 
   269                              <1> section		.data
   270 00000000 496E67726573652070- <1> 	msgx            db      "Ingrese posicion en x", 0
   270 00000009 6F736963696F6E2065- <1>
   270 00000012 6E207800            <1>
   271 00000016 496E67726573652070- <1>         msgy            db      "Ingrese posicion en y", 0
   271 0000001F 6F736963696F6E2065- <1>
   271 00000028 6E207900            <1>
   272 0000002C 506F736963696F6E20- <1>         msgError        db      "Posicion invalida",10,13,0
   272 00000035 696E76616C6964610A- <1>
   272 0000003E 0D00                <1>
   273 00000040 506F736963696F6E20- <1>         msgPsc          db      "Posicion ingresada: %hhi - %hhi",10,13,0
   273 00000049 696E67726573616461- <1>
   273 00000052 3A2025686869202D20- <1>
   273 0000005B 256868690A0D00      <1>
   274 00000062 2568686900          <1>         mFormat         db      "%hhi", 0
   275 00000067 256868690A0D00      <1> 	mVer		db	"%hhi",10,13,0
   276                              <1> 
   277 0000006E 496E6772657365206C- <1> 	msgDir		db	"Ingrese la direccion: ",0
   277 00000077 612064697265636369- <1>
   277 00000080 6F6E3A2000          <1>
   278 00000085 64657200            <1> 	derDir		db	"der",0
   279 00000089 6464657200          <1> 	dderDir		db	"dder",0
   280 0000008E 61626100            <1> 	abaDir		db	"aba",0
   281 00000092 697A7100            <1> 	izqDir		db      "izq",0
   282 00000096 64697A7100          <1>         dizqDir		db      "dizq",0
   283 0000009B 446972656363696F6E- <1> 	msgErrDir	db	"Direccion no valida",10,13,0
   283 000000A4 206E6F2076616C6964- <1>
   283 000000AD 610A0D00            <1>
   284                              <1> 
   285 000000B1 03                  <1> 	posxFortaleza	db	03h
   286 000000B2 05                  <1> 	posyFortaleza	db	05h
   287 000000B3 00                  <1> 	contador	db	00h
   288 000000B4 00                  <1> 	contAux		db	00h
   289                              <1> section		.bss
   290 00000000 <res Ah>            <1> 	posxStr		resb	10
   291 0000000A <res Ah>            <1> 	posyStr		resb	10
   292                              <1> 
   293 00000014 ??                  <1> 	posxEnv		resb	1
   294 00000015 ??                  <1> 	posyEnv		resb	1
   295                              <1> 
   296 00000016 <res Ah>            <1> 	direccion	resb	10
   297                              <1> 
     3                                  extern printf,system
     4                                  global main
     5                                  
     6                                  section	.data
     7                                  
     8 000000B5 80804C4E468080          	matriz		db      80h,80h,4Ch,4Eh,46h,80h,80h
     9 000000BC 80804C4E468080                                  db      80h,80h,4Ch,4Eh,46h,80h,80h
    10 000000C3 4C4C4C4E464646                                  db      4Ch,4Ch,4Ch,4Eh,46h,46h,46h
    11 000000CA 4C4C4C4E464646                                  db      4Ch,4Ch,4Ch,4Eh,46h,46h,46h
    12 000000D1 50500C0E064141                                  db      50h,50h,0Ch,0Eh,06h,41h,41h ;cambiar
    13 000000D8 80800C0E068080                                  db      80h,80h,0Ch,0Eh,06h,80h,80h ;cambiar
    14 000000DF 80800000008080                                  db      80h,80h,00h,00h,00h,80h,80h
    15                                  
    16 000000E6 31                      	tamanio		db	31h
    17 000000E7 07                      	longitud	db	07h
    18 000000E8 256868692C25686869-     	msgVer		db	"%hhi,%hhi",10,13,0
    18 000000F1 0A0D00             
    19 000000F4 636C65617200            	cmd_clear	db	"clear",0
    20                                  
    21                                  section	.bss
    22 00000020 ??                      	posicionx	resb	1
    23 00000021 ??                      	posiciony	resb	1
    24                                  
    25                                  section	.text
    26                                  main:
    27                                          printMatriz     matriz, [tamanio], [longitud]
     4                              <1> 
     5                              <1> section .data
     6                              <1> 
     7 000000FA 00                  <1>  posx db 00h
     8                              <1> 
     9 000000FB 20202000            <1>  msgCI db '   ', 0
    10 000000FF 7C787C00            <1>  msgCS db '|x|', 0
    11 00000103 7C6F7C00            <1>  msgCO db '|o|', 0
    12 00000107 7C207C00            <1>  msgCD db '| |', 0
    13 0000010B 0A0D00              <1>  msgSL db '',10,13,0
    14 0000010E 0A0D2D2D2D2D2D2D2D- <1>  msgDiv db 10,13,'----------------------',10,13,0
    14 00000117 2D2D2D2D2D2D2D2D2D- <1>
    14 00000120 2D2D2D2D2D2D0A0D00  <1>
    15                              <1> 
    16                              <1> section .text
    17                              <1> inicio:
    18                              <1> 
    19 00000000 4829C0              <1>  sub rax,rax
    20 00000003 4829DB              <1>  sub rbx,rbx
    21 00000006 4829F6              <1>  sub rsi,rsi
    22                              <1> ciclo:
    23 00000009 3A1C25[E6000000]    <1>  cmp bl, %2
    24 00000010 7465                <1>  je termina
    25                              <1> 
    26 00000012 8A83[B5000000]      <1>  mov al, [%1 + rbx]
    27 00000018 2480                <1>  and al,10000000b
    28 0000001A 3C80                <1>  cmp al,10000000b
    29 0000001C 747F                <1>  je printCI
    30                              <1> 
    31 0000001E 8A83[B5000000]      <1>  mov al,[%1 + rbx]
    32 00000024 2440                <1>  and al,01000000b
    33 00000026 3C40                <1>  cmp al,01000000b
    34 00000028 0F8488000000        <1>  je printSol
    35                              <1> 
    36 0000002E 8A83[B5000000]      <1>  mov al,[%1 + rbx]
    37 00000034 2420                <1>  and al,00100000b
    38 00000036 3C20                <1>  cmp al,00100000b
    39 00000038 0F8491000000        <1>  je printOfi
    40                              <1> 
    41 0000003E 48BF-               <1>  mov rdi, msgCD
    41 00000040 [0701000000000000]  <1>
    42 00000048 408AB3[B5000000]    <1>  mov sil,[%1 + rbx]
    43 0000004F 4883EC08            <1>  sub rsp, 8
    44 00000053 E8(00000000)        <1>  call printf
    45 00000058 4883C408            <1>  add rsp, 8
    46                              <1> 
    47                              <1> avanza:
    48 0000005C FEC3                <1>  inc bl
    49                              <1> 
    50 0000005E FE0425[FA000000]    <1>  inc byte[posx]
    51 00000065 8A0C25[E7000000]    <1>  mov cl,%3
    52 0000006C 380C25[FA000000]    <1>  cmp byte[posx],cl
    53 00000073 7404                <1>  je saltoDeLinea
    54                              <1> 
    55 00000075 EB92                <1>  jmp ciclo
    56                              <1> 
    57                              <1> termina:
    58 00000077 EB72                <1>  jmp fin
    59                              <1> 
    60                              <1> saltoDeLinea:
    61 00000079 C60425[FA000000]00  <1>  mov byte[posx],00h
    62                              <1> 
    63 00000081 48BF-               <1>  mov rdi, msgDiv
    63 00000083 [0E01000000000000]  <1>
    64 0000008B 4883EC08            <1>  sub rsp, 8
    65 0000008F E8(00000000)        <1>  call puts
    66 00000094 4883C408            <1>  add rsp, 8
    67 00000098 E96CFFFFFF          <1>  jmp ciclo
    68                              <1> 
    69                              <1> 
    70                              <1> printCI:
    71 0000009D 48BF-               <1>  mov rdi, msgCI
    71 0000009F [FB00000000000000]  <1>
    72 000000A7 4883EC08            <1>  sub rsp, 8
    73 000000AB E8(00000000)        <1>  call printf
    74 000000B0 4883C408            <1>  add rsp, 8
    75                              <1> 
    76 000000B4 EBA6                <1>  jmp avanza
    77                              <1> printSol:
    78 000000B6 48BF-               <1>  mov rdi, msgCS
    78 000000B8 [FF00000000000000]  <1>
    79 000000C0 4883EC08            <1>  sub rsp, 8
    80 000000C4 E8(00000000)        <1>  call printf
    81 000000C9 4883C408            <1>  add rsp, 8
    82                              <1> 
    83 000000CD EB8D                <1>  jmp avanza
    84                              <1> 
    85                              <1> 
    86                              <1> printOfi:
    87 000000CF 48BF-               <1>  mov rdi, msgCO
    87 000000D1 [0301000000000000]  <1>
    88 000000D9 4883EC08            <1>  sub rsp, 8
    89 000000DD E8(00000000)        <1>  call printf
    90 000000E2 4883C408            <1>  add rsp, 8
    91                              <1> 
    92 000000E6 E971FFFFFF          <1>  jmp avanza
    93                              <1> 
    94                              <1> fin:
    95 000000EB 4829C0              <1>  sub rax,rax
    96                              <1> 
    28                                  	ganaronSoldados	matriz
   220                              <1> 
   221                              <1> validarFin:
   222 000000EE 4829C9              <1>  sub rcx,rcx
   223 000000F1 B109                <1>  mov cl,09h
   224                              <1>  indice posxFortaleza,posyFortaleza
   250                              <2> 
   251 000000F3 4829DB              <2>  sub rbx,rbx
   252 000000F6 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 000000F9 480FBE0425-         <2>  movsx rax, byte[%2]
   254 000000FE [B2000000]          <2>
   255 00000102 48FFC8              <2>  dec rax
   256 00000105 486BC001            <2>  imul rax,01h
   257 00000109 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 0000010D 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 00000110 480FBE0425-         <2>  movsx rax, byte[%1]
   261 00000115 [B1000000]          <2>
   262 00000119 48FFC8              <2>  dec rax
   263 0000011C 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 00000120 4801C3              <2>  add rbx,rax
   266                              <2> 
   225                              <1> cicloFortaleza:
   226 00000123 8A83[B5000000]      <1>  mov al,[%1 + rbx]
   227 00000129 2440                <1>  and al,01000000b
   228 0000012B 3C40                <1>  cmp al,01000000b
   229 0000012D 752D                <1>  jne finValidacion
   230                              <1> siguienteDir:
   231 0000012F 48FFC3              <1>  inc rbx
   232 00000132 FE0425[B3000000]    <1>  inc byte[contador]
   233 00000139 FE0425[B4000000]    <1>  inc byte[contAux]
   234 00000140 803C25[B4000000]03  <1>  cmp byte[contAux],03h
   235 00000148 7404                <1>  je siguienteFila
   236 0000014A E2D7                <1>  loop cicloFortaleza
   237 0000014C EB0E                <1>  jmp finValidacion
   238                              <1> siguienteFila:
   239 0000014E C60425[B4000000]00  <1>  mov byte[contAux],00h
   240 00000156 4883C304            <1>  add rbx,0004h
   241 0000015A E2C7                <1>  loop cicloFortaleza
   242                              <1> 
   243                              <1> finValidacion:
   244 0000015C 4829C0              <1>  sub rax,rax
   245 0000015F 8A0425[B3000000]    <1>  mov al,[contador]
   246                              <1> 
    29 00000166 3C09                    	cmp	al,09h
    30 00000168 0F8429050000            	je	finMain
    31                                  
    32                                  	ingreso		posicionx, posiciony, matriz
    30                              <1> lectura:
    31                              <1>  mPuts msgx
    11 0000016E 48BF-               <2>  mov rdi, %1
    11 00000170 [0000000000000000]  <2>
    12 00000178 4883EC08            <2>  sub rsp, 8
    13 0000017C E8(00000000)        <2>  call puts
    14 00000181 4883C408            <2>  add rsp, 8
    32                              <1>  mGets posxStr
     4 00000185 48BF-               <2>  mov rdi, %1
     4 00000187 [0000000000000000]  <2>
     5 0000018F 4883EC08            <2>  sub rsp, 8
     6 00000193 E8(00000000)        <2>  call gets
     7 00000198 4883C408            <2>  add rsp, 8
    33                              <1> 
    34                              <1>  mPuts msgy
    11 0000019C 48BF-               <2>  mov rdi, %1
    11 0000019E [1600000000000000]  <2>
    12 000001A6 4883EC08            <2>  sub rsp, 8
    13 000001AA E8(00000000)        <2>  call puts
    14 000001AF 4883C408            <2>  add rsp, 8
    35                              <1>  mGets posyStr
     4 000001B3 48BF-               <2>  mov rdi, %1
     4 000001B5 [0A00000000000000]  <2>
     5 000001BD 4883EC08            <2>  sub rsp, 8
     6 000001C1 E8(00000000)        <2>  call gets
     7 000001C6 4883C408            <2>  add rsp, 8
    36                              <1> 
    37                              <1>  mSscanf posxStr, mFormat, posxEnv
    18 000001CA 48BF-               <2>  mov rdi, %1
    18 000001CC [0000000000000000]  <2>
    19 000001D4 48BE-               <2>  mov rsi, %2
    19 000001D6 [6200000000000000]  <2>
    20 000001DE 48BA-               <2>  mov rdx, %3
    20 000001E0 [1400000000000000]  <2>
    21 000001E8 4883EC08            <2>  sub rsp, 8
    22 000001EC E8(00000000)        <2>  call sscanf
    23 000001F1 4883C408            <2>  add rsp, 8
    24                              <2> 
    25 000001F5 4883F801            <2>  cmp rax, 1
    26 000001F9 0F8C08010000        <2>  jl error
    38                              <1>  mSscanf posyStr, mFormat, posyEnv
    18 000001FF 48BF-               <2>  mov rdi, %1
    18 00000201 [0A00000000000000]  <2>
    19 00000209 48BE-               <2>  mov rsi, %2
    19 0000020B [6200000000000000]  <2>
    20 00000213 48BA-               <2>  mov rdx, %3
    20 00000215 [1500000000000000]  <2>
    21 0000021D 4883EC08            <2>  sub rsp, 8
    22 00000221 E8(00000000)        <2>  call sscanf
    23 00000226 4883C408            <2>  add rsp, 8
    24                              <2> 
    25 0000022A 4883F801            <2>  cmp rax, 1
    26 0000022E 0F8CD3000000        <2>  jl error
    39                              <1> 
    40                              <1> 
    41 00000234 8A0425[14000000]    <1>  mov al, [posxEnv]
    42 0000023B 3C01                <1>  cmp al, 1
    43 0000023D 0F8CC4000000        <1>  jl error
    44 00000243 3C07                <1>  cmp al, 7
    45 00000245 0F8FBC000000        <1>  jg error
    46                              <1> 
    47 0000024B 8A0425[15000000]    <1>  mov al, [posyEnv]
    48 00000252 3C01                <1>  cmp al, 1
    49 00000254 0F8CAD000000        <1>  jl error
    50 0000025A 83F807              <1>  cmp eax, 7
    51 0000025D 0F8FA4000000        <1>  jg error
    52                              <1> 
    53                              <1> validarCasilla:
    54 00000263 4829DB              <1>  sub rbx,rbx
    55                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 00000266 4829DB              <2>  sub rbx,rbx
   252 00000269 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 0000026C 480FBE0425-         <2>  movsx rax, byte[%2]
   254 00000271 [15000000]          <2>
   255 00000275 48FFC8              <2>  dec rax
   256 00000278 486BC001            <2>  imul rax,01h
   257 0000027C 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 00000280 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 00000283 480FBE0425-         <2>  movsx rax, byte[%1]
   261 00000288 [14000000]          <2>
   262 0000028C 48FFC8              <2>  dec rax
   263 0000028F 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 00000293 4801C3              <2>  add rbx,rax
   266                              <2> 
    56 00000296 48BF-               <1>  mov rdi,mVer
    56 00000298 [6700000000000000]  <1>
    57 000002A0 408AB3[B5000000]    <1>  mov sil,[%3 + rbx]
    58 000002A7 4883EC08            <1>  sub rsp, 8
    59 000002AB E8(00000000)        <1>  call printf
    60 000002B0 4883C408            <1>  add rsp, 8
    61                              <1> 
    62 000002B4 4829C0              <1>  sub rax,rax
    63 000002B7 8A83[B5000000]      <1>  mov al, [%3 + rbx]
    64                              <1> 
    65 000002BD 2480                <1>  and al,10000000b
    66 000002BF 3C80                <1>  cmp al,10000000b
    67 000002C1 7444                <1>  je error
    68                              <1> 
    69                              <1> envio:
    70 000002C3 8A0425[14000000]    <1>  mov al,[posxEnv]
    71 000002CA 880425[20000000]    <1>  mov [%1], al
    72                              <1> 
    73 000002D1 8A0425[15000000]    <1>  mov al,[posyEnv]
    74 000002D8 880425[21000000]    <1>  mov [%2], al
    75                              <1> 
    76 000002DF 48BF-               <1>  mov rdi, msgPsc
    76 000002E1 [4000000000000000]  <1>
    77 000002E9 408A3425[14000000]  <1>  mov sil, [posxEnv]
    78 000002F1 8A1425[15000000]    <1>  mov dl, [posyEnv]
    79 000002F8 4883EC08            <1>  sub rsp, 8
    80 000002FC E8(00000000)        <1>  call printf
    81 00000301 4883C408            <1>  add rsp, 8
    82                              <1> 
    83 00000305 EB1C                <1>  jmp terminaLectura
    84                              <1> error:
    85                              <1>  mPuts msgError
    11 00000307 48BF-               <2>  mov rdi, %1
    11 00000309 [2C00000000000000]  <2>
    12 00000311 4883EC08            <2>  sub rsp, 8
    13 00000315 E8(00000000)        <2>  call puts
    14 0000031A 4883C408            <2>  add rsp, 8
    86 0000031E E94BFEFFFF          <1>  jmp lectura
    87                              <1> 
    88                              <1> terminaLectura:
    89 00000323 4829C0              <1>  sub rax,rax
    90                              <1> lecturaDir:
    91                              <1>  mPuts msgDir
    11 00000326 48BF-               <2>  mov rdi, %1
    11 00000328 [6E00000000000000]  <2>
    12 00000330 4883EC08            <2>  sub rsp, 8
    13 00000334 E8(00000000)        <2>  call puts
    14 00000339 4883C408            <2>  add rsp, 8
    92                              <1>  mGets direccion
     4 0000033D 48BF-               <2>  mov rdi, %1
     4 0000033F [1600000000000000]  <2>
     5 00000347 4883EC08            <2>  sub rsp, 8
     6 0000034B E8(00000000)        <2>  call gets
     7 00000350 4883C408            <2>  add rsp, 8
    93                              <1> comparacion:
    94                              <1> 
    95 00000354 488D3C25[16000000]  <1>  lea rdi,[direccion]
    96 0000035C 488D3425[85000000]  <1>  lea rsi,[derDir]
    97                              <1> 
    98 00000364 4883EC08            <1>  sub rsp,8
    99 00000368 E8(00000000)        <1>  call strcmp
   100 0000036D 4883C408            <1>  add rsp,8
   101 00000371 4885C0              <1>  test rax,rax
   102 00000374 0F84B4000000        <1>  jz derecha
   103                              <1> 
   104 0000037A 488D3C25[16000000]  <1>  lea rdi,[direccion]
   105 00000382 488D3425[89000000]  <1>  lea rsi,[dderDir]
   106 0000038A 4883EC08            <1>  sub rsp,8
   107 0000038E E8(00000000)        <1>  call strcmp
   108 00000393 4883C408            <1>  add rsp,8
   109 00000397 4885C0              <1>  test rax,rax
   110 0000039A 0F84F9000000        <1>  jz diagonalDerecha
   111                              <1> 
   112 000003A0 488D3C25[16000000]  <1>  lea rdi,[direccion]
   113 000003A8 488D3425[8E000000]  <1>  lea rsi,[abaDir]
   114 000003B0 4883EC08            <1>  sub rsp,8
   115 000003B4 E8(00000000)        <1>  call strcmp
   116 000003B9 4883C408            <1>  add rsp,8
   117 000003BD 4885C0              <1>  test rax,rax
   118 000003C0 0F8443010000        <1>  jz abajo
   119                              <1> 
   120 000003C6 488D3C25[16000000]  <1>  lea rdi,[direccion]
   121 000003CE 488D3425[96000000]  <1>  lea rsi,[dizqDir]
   122 000003D6 4883EC08            <1>  sub rsp,8
   123 000003DA E8(00000000)        <1>  call strcmp
   124 000003DF 4883C408            <1>  add rsp,8
   125 000003E3 4885C0              <1>  test rax,rax
   126 000003E6 0F848D010000        <1>  jz diagonalIzquierda
   127                              <1> 
   128 000003EC 488D3C25[16000000]  <1>  lea rdi,[direccion]
   129 000003F4 488D3425[92000000]  <1>  lea rsi,[izqDir]
   130 000003FC 4883EC08            <1>  sub rsp,8
   131 00000400 E8(00000000)        <1>  call strcmp
   132 00000405 4883C408            <1>  add rsp,8
   133 00000409 4885C0              <1>  test rax,rax
   134 0000040C 0F84D4010000        <1>  jz izquierda
   135                              <1> 
   136                              <1> entradaInvalida:
   137                              <1>  mPuts msgErrDir
    11 00000412 48BF-               <2>  mov rdi, %1
    11 00000414 [9B00000000000000]  <2>
    12 0000041C 4883EC08            <2>  sub rsp, 8
    13 00000420 E8(00000000)        <2>  call puts
    14 00000425 4883C408            <2>  add rsp, 8
   138 00000429 E9F8FEFFFF          <1>  jmp lecturaDir
   139                              <1> 
   140                              <1> derecha:
   141                              <1>  mPuts derDir
    11 0000042E 48BF-               <2>  mov rdi, %1
    11 00000430 [8500000000000000]  <2>
    12 00000438 4883EC08            <2>  sub rsp, 8
    13 0000043C E8(00000000)        <2>  call puts
    14 00000441 4883C408            <2>  add rsp, 8
   142 00000445 4829DB              <1>  sub rbx,rbx
   143                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 00000448 4829DB              <2>  sub rbx,rbx
   252 0000044B 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 0000044E 480FBE0425-         <2>  movsx rax, byte[%2]
   254 00000453 [15000000]          <2>
   255 00000457 48FFC8              <2>  dec rax
   256 0000045A 486BC001            <2>  imul rax,01h
   257 0000045E 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 00000462 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 00000465 480FBE0425-         <2>  movsx rax, byte[%1]
   261 0000046A [14000000]          <2>
   262 0000046E 48FFC8              <2>  dec rax
   263 00000471 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 00000475 4801C3              <2>  add rbx,rax
   266                              <2> 
   144 00000478 8A83[B5000000]      <1>  mov al,[%3 + rbx]
   145 0000047E 2410                <1>  and al,00010000b
   146 00000480 3C10                <1>  cmp al,00010000b
   147 00000482 758E                <1>  jne entradaInvalida
   148                              <1> 
   149 00000484 80A3[B5000000]3F    <1>  and byte[%3 + rbx],00111111b
   150 0000048B FEC3                <1>  inc bl
   151 0000048D 808B[B5000000]40    <1>  or byte[%3 + rbx],01000000b
   152                              <1> 
   153 00000494 E9B9010000          <1>  jmp finDir
   154                              <1> diagonalDerecha:
   155                              <1>  mPuts dderDir
    11 00000499 48BF-               <2>  mov rdi, %1
    11 0000049B [8900000000000000]  <2>
    12 000004A3 4883EC08            <2>  sub rsp, 8
    13 000004A7 E8(00000000)        <2>  call puts
    14 000004AC 4883C408            <2>  add rsp, 8
   156                              <1> 
   157 000004B0 4829DB              <1>  sub rbx,rbx
   158                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 000004B3 4829DB              <2>  sub rbx,rbx
   252 000004B6 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 000004B9 480FBE0425-         <2>  movsx rax, byte[%2]
   254 000004BE [15000000]          <2>
   255 000004C2 48FFC8              <2>  dec rax
   256 000004C5 486BC001            <2>  imul rax,01h
   257 000004C9 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 000004CD 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 000004D0 480FBE0425-         <2>  movsx rax, byte[%1]
   261 000004D5 [14000000]          <2>
   262 000004D9 48FFC8              <2>  dec rax
   263 000004DC 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 000004E0 4801C3              <2>  add rbx,rax
   266                              <2> 
   159 000004E3 8A83[B5000000]      <1>  mov al,[%3 + rbx]
   160 000004E9 2408                <1>  and al,00001000b
   161 000004EB 3C08                <1>  cmp al,00001000b
   162 000004ED 0F851FFFFFFF        <1>  jne entradaInvalida
   163                              <1> 
   164 000004F3 80A3[B5000000]3F    <1>  and byte[%3 + rbx],00111111b
   165 000004FA 80C308              <1>  add bl, 08h
   166 000004FD 808B[B5000000]40    <1>  or byte[%3 + rbx],01000000b
   167                              <1> 
   168 00000504 E949010000          <1>  jmp finDir
   169                              <1> abajo:
   170                              <1>  mPuts abaDir
    11 00000509 48BF-               <2>  mov rdi, %1
    11 0000050B [8E00000000000000]  <2>
    12 00000513 4883EC08            <2>  sub rsp, 8
    13 00000517 E8(00000000)        <2>  call puts
    14 0000051C 4883C408            <2>  add rsp, 8
   171                              <1> 
   172 00000520 4829DB              <1>  sub rbx,rbx
   173                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 00000523 4829DB              <2>  sub rbx,rbx
   252 00000526 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 00000529 480FBE0425-         <2>  movsx rax, byte[%2]
   254 0000052E [15000000]          <2>
   255 00000532 48FFC8              <2>  dec rax
   256 00000535 486BC001            <2>  imul rax,01h
   257 00000539 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 0000053D 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 00000540 480FBE0425-         <2>  movsx rax, byte[%1]
   261 00000545 [14000000]          <2>
   262 00000549 48FFC8              <2>  dec rax
   263 0000054C 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 00000550 4801C3              <2>  add rbx,rax
   266                              <2> 
   174 00000553 8A83[B5000000]      <1>  mov al,[%3 + rbx]
   175 00000559 2404                <1>  and al,00000100b
   176 0000055B 3C04                <1>  cmp al,00000100b
   177 0000055D 0F85AFFEFFFF        <1>  jne entradaInvalida
   178                              <1> 
   179 00000563 80A3[B5000000]3F    <1>  and byte[%3 + rbx],00111111b
   180 0000056A 80C307              <1>  add bl, 07h
   181 0000056D 808B[B5000000]40    <1>  or byte[%3 + rbx],01000000b
   182                              <1> 
   183 00000574 E9D9000000          <1>  jmp finDir
   184                              <1> diagonalIzquierda:
   185                              <1>  mPuts dizqDir
    11 00000579 48BF-               <2>  mov rdi, %1
    11 0000057B [9600000000000000]  <2>
    12 00000583 4883EC08            <2>  sub rsp, 8
    13 00000587 E8(00000000)        <2>  call puts
    14 0000058C 4883C408            <2>  add rsp, 8
   186                              <1> 
   187 00000590 4829DB              <1>  sub rbx,rbx
   188                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 00000593 4829DB              <2>  sub rbx,rbx
   252 00000596 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 00000599 480FBE0425-         <2>  movsx rax, byte[%2]
   254 0000059E [15000000]          <2>
   255 000005A2 48FFC8              <2>  dec rax
   256 000005A5 486BC001            <2>  imul rax,01h
   257 000005A9 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 000005AD 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 000005B0 480FBE0425-         <2>  movsx rax, byte[%1]
   261 000005B5 [14000000]          <2>
   262 000005B9 48FFC8              <2>  dec rax
   263 000005BC 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 000005C0 4801C3              <2>  add rbx,rax
   266                              <2> 
   189 000005C3 8A83[B5000000]      <1>  mov al,[%3 + rbx]
   190 000005C9 2402                <1>  and al,00000010b
   191 000005CB 3C02                <1>  cmp al,00000010b
   192 000005CD 0F853FFEFFFF        <1>  jne entradaInvalida
   193                              <1> 
   194 000005D3 80A3[B5000000]3F    <1>  and byte[%3 + rbx],00111111b
   195 000005DA 80C306              <1>  add bl, 06h
   196 000005DD 808B[B5000000]40    <1>  or byte[%3 + rbx],01000000b
   197                              <1> 
   198 000005E4 EB6C                <1>  jmp finDir
   199                              <1> izquierda:
   200                              <1>  mPuts izqDir
    11 000005E6 48BF-               <2>  mov rdi, %1
    11 000005E8 [9200000000000000]  <2>
    12 000005F0 4883EC08            <2>  sub rsp, 8
    13 000005F4 E8(00000000)        <2>  call puts
    14 000005F9 4883C408            <2>  add rsp, 8
   201                              <1> 
   202 000005FD 4829DB              <1>  sub rbx,rbx
   203                              <1>  indice posxEnv, posyEnv
   250                              <2> 
   251 00000600 4829DB              <2>  sub rbx,rbx
   252 00000603 4829C0              <2>  sub rax,rax
   253                              <2> 
   254 00000606 480FBE0425-         <2>  movsx rax, byte[%2]
   254 0000060B [15000000]          <2>
   255 0000060F 48FFC8              <2>  dec rax
   256 00000612 486BC001            <2>  imul rax,01h
   257 00000616 486BC007            <2>  imul rax,07h
   258                              <2> 
   259 0000061A 4889C3              <2>  mov rbx,rax
   260                              <2> 
   261 0000061D 480FBE0425-         <2>  movsx rax, byte[%1]
   261 00000622 [14000000]          <2>
   262 00000626 48FFC8              <2>  dec rax
   263 00000629 486BC001            <2>  imul rax,01h
   264                              <2> 
   265 0000062D 4801C3              <2>  add rbx,rax
   266                              <2> 
   204 00000630 8A83[B5000000]      <1>  mov al,[%3 + rbx]
   205 00000636 2401                <1>  and al,00000001b
   206 00000638 3C01                <1>  cmp al,00000001b
   207 0000063A 0F85D2FDFFFF        <1>  jne entradaInvalida
   208                              <1> 
   209 00000640 80A3[B5000000]3F    <1>  and byte[%3 + rbx],00111111b
   210 00000647 FECB                <1>  dec bl
   211 00000649 808B[B5000000]40    <1>  or byte[%3 + rbx],01000000b
   212                              <1> 
   213 00000650 EB00                <1>  jmp finDir
   214                              <1> finDir:
   215 00000652 4829C0              <1>  sub rax,rax
   216                              <1> 
    33 00000655 48BF-                   	mov		rdi,msgVer
    33 00000657 [E800000000000000] 
    34 0000065F 408A3425[20000000]      	mov		sil,[posicionx]
    35 00000667 8A1425[21000000]        	mov		dl,[posiciony]
    36 0000066E 4883EC08                	sub		rsp,8
    37 00000672 E8(00000000)            	call		printf
    38 00000677 4883C408                	add		rsp,8
    39                                  
    40 0000067B 48BF-                   	mov	rdi,cmd_clear
    40 0000067D [F400000000000000] 
    41 00000685 4883EC08                	sub	rsp,8
    42 00000689 E8(00000000)            	call	system
    43 0000068E 4883C408                	add	rsp,8
    44                                  
    45 00000692 E969F9FFFF              	jmp	main
    46                                  finMain:
    47 00000697 C3                      	ret
